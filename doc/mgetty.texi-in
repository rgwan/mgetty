\input texinfo    @c -*-texinfo-*-
@c %**start of header
@c $Id: mgetty.texi-in,v 1.9 1994/02/04 21:55:38 gert Exp $ (c) 1993 Gert Doering and Klaus Weidner
@setfilename mgetty.info
@settitle mgetty + sendfax
@c %**end of header
@finalout

@ifinfo
This is the online documentation for the mgetty + sendfax
package.

Copyright @copyright{} 1993 Gert Doering
@end ifinfo

@titlepage
@sp 6
@center @titlefont{mgetty+sendfax}
@sp 4
@center Version 0.18
@sp 1
@center Januar 1994
@sp 5
@center Gert Doering
@center gert@@greenie.muc.de
@center gdoering@@physik.tu-muenchen.de

@vskip 0pt plus 1filll
@c Copyright @copyright{} 1993 Gert Doering
@end titlepage

@ifinfo
@node Top, Intro, (dir), (dir)
@top mgetty + sendfax

This is the online documentation for the mgetty+sendfax package written
by Gert Doering.

@menu
* Intro::           Introduction
* mgetty::          Using @code{mgetty}
* Fax::             Fax Operations
* voice::           Voice Operations
* Problems::        Common problems and solutions
@end menu

@end ifinfo

@c ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

@node Intro, mgetty, Top, Top
@chapter Introduction

@code{mgetty} allows you to use a class 2 fax modem for receiving faxes
and handling external logins without interfering with outgoing calls.
@code{sendfax} is a standalone program which sends fax files.  This
manual explains how to configure and install the package and offers some
hints on handling faxes.

@menu
* Copying::         Copying conditions and (lack of) warranty
* Overview::        Features of @code{mgetty} and @code{sendfax}
* Supported::       Supported systems and modems
* Install::         Configuration and installation
@end menu

@node Copying, Overview, Intro, Intro
@section Copying conditions and (lack of) warranty

@cartouche
@strong{WARNING:} This package is still BETA software. Use it at your own
risk, there is @strong{no} warranty. If it erases all the data on your hard
disk, damages your hardware, or kills your dog, that is entirely your
problem. Anyway, the program works for me and quite a lot of other people.
@end cartouche

The @code{mgetty+sendfax} package is Copyright @copyright{} 1993 Gert
Doering. You are permitted to do anything you want with this program ---
redistribute it, use parts of the code in your own programs, @dots{}, but
you have to give me credit --- do not remove my name. Further, if you
distribute a modified version, mark it clearly as such (``@dots{}
@emph{derived} from @code{mgetty+sendfax} by Gert Doering'')!

If the program works for you, and you want to honour my efforts, you are
invited to donate as much as you want@dots{}


@node Overview, Supported, Copying, Intro
@section Features of @code{mgetty} and @code{sendfax}

This package contains two major programs, @code{mgetty} and
@code{sendfax}.

This is what you can do with @code{sendfax} if you have a standard
class 2 fax modem:

@itemize @bullet
@item
send faxes directly or using shell scripts

@item
do ``fax polling'', this means you can call the weather station and
get them to send you a fax containing the current weather map. (Not all
modem manufacturers implement this feature in their modems!)

@item
create a ``fax queue'', outgoing faxes get sent automatically, the
user is informed by mail about the result.
@end itemize

@code{mgetty} allows you to use a single modem line for receiving
calls and dialing out.

@itemize @bullet

@item
@code{mgetty} knows about ``smart'' modems, and will make sure that the
modem is always in a defined state (specific modem initialization possible)

@item
Incoming calls are answered manually (@code{RING}
-> @code{ATA} -> @code{CONNECT}) instead of using auto-answer
(@samp{ATS0=1}), this way the modem won't pick up the phone when the
machine is down or logins are not allowed. 

@item
@code{mgetty} incorporates all features of uugetty: it honours @file{LCK.*}
files created by @code{uucico} and other comm programs, this way it will
prevent dial-outs while a caller is online and it won't be confused if
other programs use the modem.

@item
@code{mgetty} can receive class 2 faxes (if your modem supports it).

@item
@code{mgetty} knows about incoming FidoNet calls.

@item
@code{mgetty} has extensive logging / debugging features

@item
do ``fax poll sending'', that is, you can setup your machine as fax poll
server, to send some fax pages to ``fax poll'' callers. (Send informations
about your system, the current wheather map, ...). Be warned, even less
modems support this feature.

@item
@code{mgetty} can selectively refuse calls based upon CallerID, if your
modem supports it, and you're subscribed to the service.
CallerID is also logged.

@item
@code{mgetty} has facilities to allow you to refuse incoming FAXes when
available disk space is low.

@end itemize

If you have any bug reports, suggestions, (critics will be shot!),
please report them to gert@@greenie.muc.de (Attention! Do not use my
old mail address ``gert@@greenie.gold.sub.org''---it doesn't work any
longer).

Also, I have created a mgetty mailing list, for discussion of problems
and suggestions. You can subscribe by sending a request to
mgetty-request@@muc.de (give me some time---I'm doing this manually),
and you can send articles to the list by sending them to mgetty@@muc.de.


@node Supported, Install, Overview, Intro
@section Supported systems and modems

Mgetty has been successfully installed and run on the following
systems:

@display
    SCO Unix 3.2.1 (ODT 1.0)                    (very well tested)
    SCO Unix 3.2.4 (ODT 2.0 + 3.0)              (very well tested)
    Linux 0.99pl1 .. pl14                       (very well tested)
    ISC Unix 3.0                                (tested)
    SVR4 Unix                                   (well tested)
    AT&T 3B1 3.51m                              (well tested)
    HP-UX 8.x                                   (well tested)
    AIX                                         (some problems remain)
    SunOS                                       (some problems remain)
    NetBSD / FreeBSD                            (under work)
@end display

It should be possible to run mgetty on any other Unix with @file{termio.h}
or @file{termios.h}. For best results, @code{select(S)} or @code{poll(S)}
are recommended, but there's a workaround. (Warning: for Unix SVR3.1 or
earlier, @emph{do not use poll()}, it will not work on tty devices.)


Up to now, it has been successfully used with the following modems (no
exhaustive list):

@display
    ZyXEL U1496 (ROM 5.05, ROM SLIP3)
        (very well tested, a couple of problems, faxpolling does not work)

    ZyXEL U1496 (ROM 6.01)
        (tested, works well, faxpolling works!)

    ZyXEL U1496EG+ (ROM 6.10)
        (tested, receiving fax/data works well, fax sending is flakey)

    ZyXEL U1496E (ROM 6.20b6 (beta))
        (tested, works well, dunno about faxpolling)

    SupraFAX v32bis
        (tested, works well, no fax polling available)

    GVC FM144/+
	(tested, works well, no fax polling available)

    TKR DM-24VF+ (Deltafax)
	(tested, works quite well, dunno about polling)

@end display


It @emph{should} work with all class 2 faxmodems. Maybe the DC2
character sent at the beginning of a page by @file{faxrec.c} must be
changed to XON, for old class 2 modems (implementing very old drafts of
the standard).


@node Install,  , Supported, Intro
@section Configuration and installation

Compiling of the package should be quite straightforward. You have to
copy @file{policy.h-dist} to @file{policy.h} and edit it to set some
local policy options, see the comments in that file. Also, you have to
edit @file{mgetty.h} to tell the package if you have select(S) or
poll(S). Further, edit the @file{Makefile}, to specify installation
paths and some system defines (explained there). (For most systems, you
have to remove @code{-DUSE_POLL} from the @code{CFLAGS=} line!)

After that, a @samp{make} should build the programs, and @samp{make
install} should install them.
  
If your system has neither the select(S) call nor the poll(S) call,
mgetty is not fully operational---these functions are the only way to
prevent mgetty from eating up characters when some other process is
trying to dial out.

You can use mgetty anyway, by specifying @code{-DUSE_READ} in the
Makefile, but beware: with this, mgetty will eat up at least one
character of the modem response when another program is dialing out.
That may lead to disastrous results if e.g. the @samp{CONNECT} string
is thus corrupted, but most of the time, the character that @file{mgetty}
eats away will be an @code{cr} or @code{nl} or part of the command
that the modem echoes back.

If your compiler complains about the @code{#ident} lines I use for
@file{SCCS}, please run @code{make noident}, that will take care of those
lines.

If you have any problems compiling mgetty and sendfax (on a Unix-like
system---I do not support MS-DOS or Windows!), please contact me.
@emph{But make sure that you have read the documentation!}

@c ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

@node mgetty, Fax, Intro, Top
@chapter Using @code{mgetty}

You can't simply call @code{mgetty} from a shell script (like @file{/etc/rc})
or interactively, because log in is not possible unless it is called
directly by the @code{init} process. The next sections explain how to do this.

@menu
* How::             How @code{mgetty} works
* Inittab::         The @file{/etc/inittab} entry
* Devices::         Choosing the right device
* Logs::            Log files
* Deny::            Denying logins (and scheduling)
* Direct::          Direct serial lines
* Interaction::     Interaction between @code{mgetty} and other programs
* Caller-ID::       Using Caller-ID to selectively accept or reject calls
@end menu

@node How, Inittab, mgetty, mgetty
@section How @code{mgetty} works

To help you understand how mgetty works, here is an example of what
happens in various circumstances when you use it to control a modem
connected to a serial line, e.g. @file{/dev/tty2a}.

When the computer is booted, the operating system starts the @code{init}
process, which is responsible for making sure that gettys are running on
the appropiate i/o devices, e.g. virtual terminals, serial lines and
modems.  @code{init} reads its configuration file, @file{/etc/inittab} (on
System V), which tells it that the line @file{/dev/tty2a} should be
controlled by mgetty. It then creates an entry in @file{/etc/utmp}
(@code{login} needs this, that's why you can't log in if you try to start
mgetty by hand), and forks a new @code{mgetty} process, using the command
line specified.

When mgetty is started, it first checks if a valid lock file held by
another process exists. If it does, this means that the port is in
use, and mgetty will wait until the lock file goes away. Invalid lock
files, e.g. for nonexistent processes (``stale'' locks), are ignored.

Once the port is free, mgetty creates its own lockfile, initializes
the modem and removes its lock file again. Then it waits for something
to happen on the port. Note that it does @emph{not} read any
characters, it just checks if there are any available for reading by
using @code{poll()} or @code{select()}.

There are two possibilities once characters arrive, either a different
program (e.g.  @code{uucico}) has started dialing out or a @samp{RING}
was sent by the modem.  In the first case, mgetty should leave the
port alone. This is easy @emph{if} the program dialing out has created a
valid lock file, mgetty will find it, wait for it to go away and then commit
suicide (which will cause @code{init} to start a fresh @code{mgetty}
process).

In the second case, when there is no lock file, mgetty assumes that
the phone is ringing, creates a lock file and reads the characters
available. If it finds a @samp{RING}, it picks up the phone by sending
@samp{ATA} and waits for the @samp{CONNECT} message. If the caller is
a fax machine, it saves the fax in the directory @file{FAX_SPOOL}
(usually @file{/usr/spool/fax/incoming}) and exits. If it is a modem,
it prints @file{/etc/issue} and displays a login prompt. Once it has
received a login string, it calls @code{login} and lets it handle
things from here. @code{login} will read the password and will then
start the user's login shell, @code{uucico}, a dialup SLIP link or
whatever, but mgetty doesn't care about that. The lock file remains so
that no other programs can use the modem while somebody is logged in.

(If the @file{mgetty.login} configuration file is used, mgetty can also call
other login programs than @code{/bin/login}.)

Once mgetty has terminated for whatever reason, @code{init} might
reinitialize the port (this is why mgetty waits for lock files to go
away instead of quitting immediately) and will then start a new
@code{mgetty} process, which will remove lock files left over from the
last login.

The lock file handling is tricky, but very important. It is essential
that @emph{all} programs that use the modem agree on one locking
protocol, otherwise one program might not know that the modem is in
use and will try to dial out anyway. A typical lock file is a file
called @file{/usr/spool/uucp/LCK..tty2a} containing the PID of
the process currently using the modem. Other processes can read it and
tell if the lock file belongs to an existing process or if it is
``stale'' and can be removed. This will obviously not work if the
processes look for lock files in different places, or if one of them
writes its PID in ASCII and another one tries to read it as a binary
number (while mgetty and sendfax do not care whether foreign lock files
are written in binary or ascii format, other programs do!).

@node Inittab, Devices, How, mgetty
@section The @file{/etc/inittab} entry
The following options are available:

@samp{-x @var{<level>}} sets the debugging level

@samp{-s @var{<speed>}} sets the port speed. If not specified, the default
from @file{policy.h}, (definition @code{DEFAULT_PORTSPEED}) will be used.

@samp{-m @var{<space>}} sets the minimum number of bytes required
on the incoming FAX spool directory.  If there isn't this much space
in the spool directory, the connection is terminated.  The default
is 1 megabyte.
  
@samp{-r} for direct lines (no modem chats are done)

@samp{-p @var{<login prompt>}} sets the login prompt (various escapes are
allowed)

@samp{-n @var{<rings>}} sets the number of @code{RING} messages to expect
before sending @code{ATA} to answer the phone. Default is one @code{RING}.

@samp{-i @file{/etc/issue}} specifies the issue file to display before 
prompting for login.

@samp{-S @file{<fax_document>}} specifies a document to send to
polling fax machines. @file{<fax_document>} has to be in G3 format (as for
@code{sendfax}).

A sample entry in @file{/etc/inittab} looks like this:

@example
F1a:23:respawn:/u/gert/getty/mgetty -x 3 tty2a
@end example

@node Devices, Logs, Inittab, mgetty
@section Choosing the right device

Some operating systems provide two separate devices for each serial
line, one of which is intended especially for gettys. This is
@emph{NOT} a good idea, because it only works if the modem is used in
auto-answer mode.

@code{mgetty} picks up the phone by hand, this will only work properly
if you use the @emph{same} device you would use for dialing out. (Some
people like to create a symlink @file{/dev/modem} for this, but you
have to be consistent and use this for @emph{all} comm programs if you
do - otherwise you'll run into problems with the lock file names).

Here are some examples for different systems:

@itemize @bullet
@item
SV Unix systems using the FAS serial driver:

Use @code{ttyF01} etc., (minor number 80+(port number). Do @emph{not}
use @code{ttyFMxxx}---mgetty will open the device anyway, but then an
open to the ``normal'' port (without carrier detect) will block.

@item
SCO Unix systems with the stock serial driver:

Use the modem-control port (@code{tty2A}), @emph{not} @code{tty2a}, because
hardware flow control doesn't work on ``lowercase'' tty decices. I'm not
absolutely sure whether this interferes with dial-out, but I don't think
so.

@item
Linux:

Use @file{/dev/ttyS*}, @emph{not} @file{/dev/cua*}
@end itemize

@node Logs, Deny, Devices, mgetty
@section Log files

@code{mgetty} will normally write all actions into a logfile, named
@file{/tmp/log_mg.@var{<device>}}, e.g., @file{/tmp/log_mg.tty2a}, so
you can easily see what's happening in your system. (If a fatal error
occurs, the error message is also written to the console, and if that
is not possible, mailed to @samp{ADMIN}).

If @code{mgetty} is compiled with @code{-DSYSLOG}, auditing and error log
messages will also go to @file{syslog} (if your system supports it).

@node Deny, Direct, Logs, mgetty
@section Denying logins

If you want to prevent mgetty from accepting calls, you can do so by
creating a file called @file{/etc/nologin.@var{<device>}}
(e.g. @file{/etc/nologin.tty2a}). mgetty will then detect an incoming call,
see this file and NOT answer the phone. This way the caller does not lose
money for a useless call when logins are not allowed anyway. (You can
change the filename that is checked by changing @code{NOLOGIN_FILE} in
@file{policy.h})

This can be used for quite sophisticated scheduling purposes - imagine a
modem attached to a line used for voice during the daytime. So, you want
the modem only to answer the phone during 9 pm and 7 am. What you do is to
have @code{cron} create a @file{/etc/nologin.@var{device}} file at 7 am (so
the modem won't answer the call during the day) and remove it at 9 pm (so
the modem can aswer the phone at night).

Naturally, this can be easily extended - e.g., answer the phone only on
weekends (similar cron job), don't answer the phone if there are less
than 5 Mbyte free on disk (have a process check for free disk space
regularily and create @file{/etc/nologin.*} file(s) accordingly), @dots{}

@node Direct, Interaction, Deny, mgetty
@section Direct serial lines

If you have a direct serial line between two unix machines, or a unix
machine and something else, and want to run a getty program on the unix
side that should not interfere with outgoing traffic (e.g.: two unix
machines, both sides running gettys, both sides able to initiate an uucp
connection), you can also use mgetty. Start it with the @samp{-r} flag (as
with uugetty), and it will not try to initialize the modem or wait for
RINGs. It will just sit silently on the port and wait@dots{} You won't see
@file{/etc/issue} on the other side until mgetty gets at least one
character, this prevents two mgettys from talking to each other.

@node Interaction, Caller-ID, Direct, mgetty
@section Interaction between @code{mgetty} and other programs

Normally, after a caller enters his login name, @code{mgetty} calls
@code{/bin/login} to do the password checking and system login.

In some special cases, you may want to call other programs instead of
@code{/bin/login}. For example, you could want to call
@code{/usr/lib/uucp/uucico -L <username>} for all login names starting with
@samp{U*} (to have @code{uucico} do the authentification, works only with
taylor uucp 1.05 or taylor uucp 1.04 with my patch in
@file{patches/taylor.p1}), or @code{/usr/lib/fnet/ifcico} for incoming
FidoNet calls (using @code{ifcico} from Eugene Crosser's @file{ifmail}
package).

@code{mgetty} can do all this. It's controlled by a configuration file
@file{mgetty.login} that is normally located in
@file{/usr/local/lib/mgetty+sendfax} (definition @code{LOGIN_CFG_FILE} in
@file{policy.h}). I have provided a sample file with lots of comments,
please look into that file for the syntax to use. To understand incoming
fido calls, you have to compile @code{mgetty} with @code{-DFIDO}.

If you are worrying about security, you can also use this mechanism: just
call @code{/bin/login} only for trusted, known users, and @code{/bin/false}
for every other login name - so, only those listed in @file{mgetty.login}
will be able to log in.

@node Caller-ID,  , Interaction, mgetty
@section Using Caller-ID to selectively accept or reject calls

If your modem is able to retrieve callerid information, and @code{mgetty}
is compiled with @code{CNDFILE} defined in @file{policy.h}, @code{mgetty}
can check the caller's number before answering the phone. (Until now, it
has only been implemented for ZyXELs - does anybody have a description how
Rockwell-based modems return Caller-ID informations?). If @code{CNDFILE} is
undefined, or if that file does not exist, all calls will be allowed.

Whether a call is accepted or denied is controlled by a configuration file,
per default @file{/usr/local/lib/mgetty+sendfax/dialin.config} (a sample
file is installed per default).

That file contains a series of tokens separated by newlines, commas, tabs
and spaces. The callerid number is compared with each token in turn, until
a match occurs. A match occurs when the token compares equally to the
callerid information up to the length of the token.  If the token is
prefixed with a ``!'', a match means ``do not answer the phone''. The token
``any'' matches any telephone number, and will terminate scanning of the
cndfile. If no callerid number is present, it is assumed to have the value
``none''. A line starting with ``#'' is a comment.  There is an implicit
``any'' at the end of the file.
 
For example:

@example
	# list of my friends' data lines
	3433535, 7445343, 5551212
	# dad's fax
	4164646777
	# disallow [other] calls from numbers matching the following prefix:
	!416
	# disallow that speed dialer that keeps hitting my machine
	!3444444
	# allow all calls with the following prefixes
	832, 555
	# don't allow calls when there's no callerid:
	!none
	# It's okay to accept calls from out of area
	# ("OUT_OF_AREA" token seems ZyXEL specific)
	OUT_OF_AREA
	# disallow all other calls
	!any
@end example

For the future, Chris is planning on adding special modem initialization
strings (e.g., 2400 bps only, fax-only, ...) dependant on the caller
number.

@c ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

@node Fax, voice, mgetty, Top
@chapter Fax Operations

Both mgetty and sendfax deal exclusively with raw ``g3'' fax files. You
will have to use external programs to create, view or print these.

There are two kinds of g3 files, the high resolution type with 204x196
dpi and the low (``normal'') resolution ones with 204x98 dpi.  If you
mix up the two, the recipient will get a fax page that is either twice
or half the proper length. You have been warned.

The width of a fax page is always 1728 pixels, the length is arbitrary
(though there are some plain paper fax machines out there that limit the
page length to A4 paper). A typical full page has a length around 2100
pixels in high-resolution mode.

@menu
* Convert::         Converting fax files
* Receiving::       Receiving faxes
* Sending::         Basic @code{sendfax} usage
* Polling::         Fax polling using @code{sendfax}
* Queuing::         Automated fax queuing 
* Fax-Tools::       Additional tools provided for handling g3 files
* Scanner::         Using an external fax as a scanner
@end menu

@node Convert, Receiving, Fax, Fax
@section Converting fax files

I recommend getting the @samp{pbmplus} package written by Jeff Poskanzer,
which includes routines to convert g3 files into bitmaps and back
(@code{g3topbm} and @code{pbmtog3}), and lots of other tools to scale and
print bitmaps. Note that it does not include a graphical front end.

The @file{pbmplus} package can be found on most major FTP sites, e.g. on
ftp.x.org in the @file{/contrib} directory.

If you want to view the images using X11, you should get one of the many
image viewers, like @samp{xview}, @samp{xloadimage} or @samp{xv}.
@xref{Fax-Tools}

Here are some examples for viewing fax files using @code{g3topbm}:

@itemize @bullet
@item
You can print a fax on a PostScript printer (try @samp{lpr -Pps} if you
don't have @samp{lp}):

@example
cat $faxfile | g3topbm | pnmtops | lp -dest postscript
@end example

@item
or on an Epson-LQ, scaled for fine resolution (use -yscale 1.84 for
normal resolution):

@example
cat $file | g3topbm | pnmscale -xscale 1.76 -yscale 0.92 |\
    pgmtopbm | pbmtodot -360x180| lp -o epson -
@end example

@item
or you could view it using X11 via:

@example
cat $file | g3topbm >/tmp/fax.pbm ; xloadimage /tmp/fax.pbm
@end example

or:
@example
g3tobpm $file | xv -
@end example

@end itemize

There are two easy ways to create g3 fax files, either use
@samp{pbmtog3} (part of the pbmplus package, @strong{Warning:}
@xref{pbmtog3}) or use GhostScript (GNU Software, can be found on
prep.ai.mit.edu) which contains a ``digifax'' driver that will produce the
required format.

Once you have the right tools, you have lots of ways to create fax files
for a wide variety of applications. Here are some examples:

@itemize @bullet
@item
Ascii files can be converted using @samp{pbmtext | pbmtog3} (use a
@emph{large} font, and don't convert texts longer than about 50 lines).
Alternatively, you can convert ascii files to PostScript using
@samp{psify}, the @samp{pslp.ps} program from the ghostscript
distribution, or similar tools, and feed their output into GhostScript.

@item
PostScript input can be converted by GhostScript (version 2.4 or
higher), using the digifax drivers (@samp{dfaxhigh} and
@samp{dfaxlow}). It will generate a plain g3 file with a 64 byte
additional header, which will be skipped automatically.  (You have to
generate separate g3 files, one per page). A typical call to
ghostscript would look like this:

@example
gs -sDEVICE=dfaxhigh -sOutputFile=/tmp/fax.g3.%d yourdocument.ps
@end example

Do @emph{not} use the ``tiffg3'' or similar drivers, they will create output
files with headers that sendfax does not understand, thus causing the
receiving fax machine to reject the data (it will assume that the
transmitted headers are garbled data).

@item
Bitmaps can be converted using the @samp{pbmplus} tools, but you'll have
to do the proper scaling by hand. Use a pipeline with @code{pbmtog3} at the
end.

@item
@TeX{} dvi files can be converted to PostScript using @samp{dvialw} or
@samp{dvips}. If you want to get the best possible output quality, you
can use Metafont to create a set of 204x196 dpi fonts, which will look a
lot better than scaled 300 dpi fonts. You can use the @code{epsf} macros
to include encapsulated PostScript files, e.g. a scanned signature.

@item
HP-Laserjet files can be translated with Chris Lewis' @file{hp2pbm}
package. It contains a program @code{hp2hig3} that will read
HP-Laserjet @file{PCL4} files and produce G3 output.

@end itemize

A rather crude sample conversion program (@code{faxcvt}) is provided in
the fax directory.

Better conversion, including guessing of the format of the input files,
is done by the @code{faxspool} program, also provided in the fax
directory. @xref{Queuing}


@node Receiving, Sending, Convert, Fax
@section Receiving faxes

If everything has been set up properly, faxes will be received
automatically. Obviously, mgetty has to be listening to the proper modem
line. Then, if a fax arrives, mgetty will store it in the directory
@code{FAX_SPOOL_IN} and send a mail to @code{MAIL_TO}.


Also, if you define @code{FAX_NOTIFY_PROGRAM} in @file{policy.h}, mgetty
will call this program (or shell script) when a fax has been completely
received. It will be called with the following command line arguments:

@example
FAX_NOTIFY_PROGRAM @var{<hangup code>} '@var{<sender id}>' @var{<nr of pages>} \
                   @var{<file name page 1>} @var{<file name page 2>} @dots{}
@end example

@var{<hangup code>} is 0 if the receive was successful, non-zero
otherwise.  @var{<sender id>} is the fax identification string received
from the other side.  @var{<file name page (i)>} is the full path name for
each received page.

A sample command line might look like this:

@example
/usr/spool/fax/new_fax 0 "+49 89 3243328" 1 /usr/spool/fax/faxf-01.a123
@end example

Such a ``notify program'' could print out the fax, convert it into a MIME
metamail and send it away, display it in an X window (a little bit
tricky), or whatever.

I do not provide examples of notify programs (yet).

@node Sending, Polling, Receiving, Fax
@section Basic @code{sendfax} usage

Sendfax is very primitive---no spool management, no format conversion,
etc.  It is designed to be able to send exactly one fax (consisting of
multiple pages) to exactly one fax machine, but it is usable from
within shell scripts.  Its input are pages in ``g3'' format, either
created with ghostscript or with pbmtog3.

It is called like this:

@example
sendfax [-v] [-n] @var{<phone-number>} @var{<fax page(s)>}
@end example

e.g.

@example
sendfax 0893243328 /tmp/to_gert_1.g3 /usr/spool/fax/outgoing/picture.g3
@end example

It will then attempt to open the fax device and send all the pages to
the remote fax machine, in the given order.

It will print little or nothing to stdout or stderr, except if it cannot
find or open one of the named files.

(Since most class 2 faxmodems do not implement the command set
properly, putting a header on a page does not work with them - because
of that, I had to disable the fax header code. It will output a
warning message and ignore the @var{header} file. @code{faxspool}
works around this problem by using @code{g3cat} (@xref{Fax-Tools}) to
``paste'' a header line on top of each page)

If you specify @samp{-v}, it will output more verbose progress messages.

If you specify @samp{-n}, it will try to send the fax data in normal
resolution, default is fine resolution. (No conversion is done, so make
sure that your input data is already in the proper format.)

Detailed reports can be found in the log file (usually
@file{/usr/spool/fax/Faxlog}) --- but they may be of little more than
technical interest since virtually all conversation with the fax modem is
logged. (Nevertheless, if you send me any bug report, @emph{please include
all log files})

@strong{Warning:} Watch sendfax closely when sending the first few
faxes. I had it abort a transfer a couple of times, not being able to
recover but @emph{not} hanging up the modem! (In my case, it was a
problem of the modem that went away when I upgraded the firmware. Older
ZyXEL releases sometimes to stopped the DTE and forgot to re-start
it again.)

The return codes of the sendfax program were chosen to make it easy for
external programs (i.e. faxrunq) to decide whether to try again or not:

@example
 0: all pages transmitted successful
 1: error on command line
 2: cannot open fax device (typically happens if fax device is
    locked, but could also be a permission problem)
 3: error initializing the modem
 4: dial failed, "BUSY"
10: dial failed, "ERROR" or "NO CARRIER"
11: waiting for XON failed (should never be seen)
12: transmitting page(s) failed (or polling failed)
@end example

If the error code is less than 10, the attempt didn't cost anything, so an
external program should try again to send the files. If it is 10 or higher,
the failed attempt probably cost something, and the program should decide
whether to try again (thus expending more money) or mail the operator and
tell him something went wrong. My @code{faxrunq} program will suspend the
job after five unsuccessful tries with error codes >= 10.

@node Polling, Queuing, Sending, Fax
@section Fax polling using @code{sendfax}

Sendfax can also be used for fax polling, the syntax is:

@example
sendfax -p @var{<fax-number>}
@end example


or for sending a fax and then switch to polling:

@example
sendfax -p @var{<fax-number>} @var{<send-documents>}
@end example

(in this case @var{<send-documents>} are sent, and then the documents
from the other modem are polled, if there are any)

the received pages are written to the current directory, so make sure
you have write access...


@strong{Warning:} Fax polling does @emph{not} work with ZyXEL Modems
with ROM releases before 6.00 - with the 6.01 Eproms it works for me.
Or at least, I have been able to receive an eight-page polled fax without
any problem at all.

It definitely doesn't work with Rockwell-based Faxmodems (Supra), since
this chipset does not support polling.

Could anybody try this with an Everex Faxmodem?


@node Queuing, Fax-Tools, Polling, Fax
@section Automated fax queuing 

For fax spooling and processing the queue, three more sample programs are
provided:

@itemize @bullet

@item
@code{faxspool} will spool a number of files (accepting various formats)
and put them into the fax spool directory. Its syntax is:

@example
faxspool phone-number input-file(s)
@end example
  
@samp{phone-number} can be an alias, in this case the files
@file{/usr/local/lib/mgetty+sendfax/aliases} and @file{$HOME/.faxnrs} will
be searched for a line starting with this alias. The remainder of this line
will then be used as fax number.

@code{faxspool} interacts with the @code{file} program and
@file{/etc/magic} to determine the file type of the input files. If your
@file{/etc/magic} lacks entries for the various bitmap files, take a look
at @file{fax/etc-magic}, it contains the most important magic numbers.

@code{faxspool} reads the text to put on top of each fax page from
@file{LIBDIR/faxheader}. This file must contain pure ASCII text. Some
tokens are replaced by the actual values: @@T@@ becomes the destination
phone number, @@P@@ becomes the actual and @@M@@ the total page number,
and @@U@@ is replaced by the user name. If your fax modem cuts of a few
lines on top of each page, its maybe a good idea to put a blank line
before the header line itself, and its also a good idea to indent the line
about 5 spaces.


@item
@code{faxrunq} will read this directory and try to send all the faxes
queued there (no time schedule handling yet). If faxrunq succeeds, the
fax is deleted and the sender is mailed. If it does not succeed after
five tries (@samp{BUSY} or a locked fax modem do @emph{not} count for
this) it will send a mail and not try any further to send this
fax. (This should prevent your faxmodem from making you
bancrupt@dots{}).

@code{faxrunq} should be called at regular intervals from @code{cron} to
process the queued jobs. It should only be executed by @emph{root}, to
make sure that all the files in the fax spool directory are read- and
writeable.

@strong{WARNING:} faxrunq doesn't yet handle multiple variants of itself
running concurrently very well - you may end up with the same fax sent two
or three times if you try. Will improve.


@item
@code{faxq} will display all entries in the fax queue. If called with
the @samp{-o} parameter, it will also display completed, but not yet
deleted jobs (JOB.done files). If called with the @samp{-v} parameter, the
output will be more verbose.

@item
@code{faxrm} can be used to remove fax jobs from the queue. It is called
with the job ids of the to-be-removed faxes as command line argument. The
job ids are those that @code{faxq} returns.

@end itemize

These utilities are not really complete, and not very well tested---but,
as usual, they work for me.

Earlier variants of those utilities had to be configured in the source
code, from this release on, that should be done by @code{make}. Please
check the scripts nevertheless, whether all directories and files are set
up properly.

@node Fax-Tools, Scanner, Queuing, Fax
@section Additional tools for working with g3 files

Some additional tools are provided for manipulating G3 fax files

@itemize @bullet
@item 
@code{g3cat} (in the @file{tools} directory) concatenates multiple G3
fax files. It accepts ``raw'' g3 files and digifax files and outputs a
``raw'' g3 file without headers. Its syntax is analogous to
@code{cat}, except that you @emph{have} to specify @file{-} to read
from @file{stdin}.

@code{g3cat} recognizes two flags: @code{-l}, to separate the fax files
with a thin black line, and @code{-a} to byte-align the end-of-line
codes in the file (Warning: some modems do not like this).

@item
To convert an incoming fax to Jef Poskanzers @file{portable bitmap}
(@code{pbm}) format, you can use the @code{g3topbm} program that is
also provided in @file{tools/}. It's advantages over Jef's
@code{g3topbm} program are that it's approximately five times faster
and takes only one eigth as much virtual memory (on machines with low
virtual memory, it can thus be up to 100 times faster!). It's disadvantage
is that it produces only ``raw'' (i.e., binary) @file{pbm} files; and
it's not as stable when handling erroneous @file{g3} data (means that
if one line is severly corrupted, it can happen that the next line
will not be decoded properly. The rest of the file will then be OK
again).

Syntax:
@example
g3topbm [-reversebits] [g3-file]
@end example

If no g3 file is specified, standard input is used.

If @code{make install} detects that you have installed the @code{pbmplus}
tools before, it will move its @code{g3topbm} to @code{g3topbm.pbm}, so
you can still use it, if you want.

@item
To convert an incoming fax into X-Windows @file{xwd} bitmaps, you can
use Chel van Gennip's @code{g3toxwd} program, found in the
@file{contrib/} directory.

@item
If you want to print out faxes on a HP laserjet printer, Chel has also
written a @code{g3tolj} program. It's not yet really complete, thus
I'm not including it in the distribution, but if you need it, I'll
send it to you.

@end itemize

@node Scanner,  , Fax-Tools, Fax
@section Using an external fax as a scanner

It is possible to tell mgetty to answer the phone even if it is not
ringing (I call this ``virtual rings''). Just send mgetty a signal
@code{SIGUSR1}, this is usually done with @samp{kill -USR1
@var{<mgetty-pid>}}.  Mgetty will then pick up the phone and try to make a
connection.

If you have a normal fax machine connected to the fax modem, it should
be possible to have that fax machine dial any digit (to turn off the
dial tone), and then have mgetty answer the phone to receive the
``incoming'' fax, thus using the fax machine as scanner without paying for a
call.

I have not tested this very thoroughly, but it seems to work quite well
at least for modem-to-modem connections.

If you have a modem that has a @samp{data/voice} button, it should also be
possible to hit that button to make the modem pick up the phone. Mgetty
will automatically notice that and handle it properly. (I've tested this
only with ZyXELs - could anybody else please test this and send me a
logfile? Thanks)

@c ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

@node voice, Problems, Fax, Top
@chapter Voice Operations

This chapter explains how you can use mgetty to implement an answering
machine if you have a modem that understands the voice command set
(i.e. the ZyXEL). Note that these extensions are maintained by Klaus
Weidner (klaus@@snarc.greenie.muc.de), send email about the voice features
to that address.

@menu
* vintro::          Introduction
* vinstall::        Installation
* vusage::          Using vgetty
* vutils::          Voice utilities
* vbugs::           Common problems
@end menu


@node vintro, vinstall, voice, voice
@section Introduction

The voice extended mgetty (called @code{vgetty}) is intended for people who
want to share a phone line for data and voice use, with the main focus
being voice calls. It is @strong{NOT} intended for a dialup system that
occasionally gets a voice call, since some modems are confused by hearing
a recorded voice message and won't get a connect.

@menu
* vfeatures::       Features of vgetty
* vneed::           What you need to use it
@end menu

@node vfeatures, vneed, vintro, vintro
@subsection Features

@itemize @bullet

@item behaves like a normal answering machine for human callers

@item automatic fax reception when a T.30 calling tone is detected

@item If the caller isn't a human or fax, a data connect is attempted,
if this is successful, the caller will get a normal login

@item does not interfere with dialouts

@item remote playback of messages via a DTMF code

@item toll saver -- if there are new messages, pick up the phone
earlier, this way you can hang up in time to avoid a useless call

@item message light - the autoanswer LED of your modem (if it has
one) is turned on if there are new messages 

@item easy playback - on some modems, you can play back the new
messages just by pressing DATA/VOICE

@item speech synthesizer support - add the date and time to messages
(not included by default)

@item voice conversion utilities - play messages on /dev/audio

@end itemize

@node vneed,  , vfeatures, vintro
@subsection What you need

Obviously, you need a modem that supports the voice commands. I have tried
only two different models so far, I would be interested in hearing about
others.

The ZyXEL works well, as long as you don't have a ROM older than 6.01. The
support for the new (>=6.10) ROMs isn't well tested yet, but it seems
to work now.
 
The Dolphin modem works with the following changes: set the volumes to
"3" in voclib.h and add -DNO_FAX to the Makefile (it can't do Class 2). The
pvfadpcm conversion doesn't work, the format seems to be different.

I recommend reading the ZFax documentation to find out how the voice stuff
works in general (i.e., where do I hook up a microphone etc.). It's the
file @file{zfax*.mnu} in the zfax main directory. Remember that CELP
compression is only supported by `+' models. If you use any mode other than
CELP, you will need a data rate of 38400 bps, a serial port with a 16550
UART is highly recommended on PCs.

@node vinstall, vusage, vintro, voice
@section Installation

If you have unpacked everything correctly, you should have a directory
`mgetty' which in turn contains a directory called `voice'. The
Makefile in `mgetty/' builds mgetty, the one in `mgetty/voice' builds
vgetty and the voice tools.

Make sure you have `mgetty' configured correctly and working, this
package uses most of its code. You need to edit at least policy.h to
fit your system. Have a look at the README and mgetty.texi for
instructions.

Don't try to build vgetty until you have built a working copy of
mgetty, which is much better tested and more stable than my code, and
any problems you have with mgetty definitely won't go away if you add
the voice code.

Once you have got mgetty working, you should configure the `voice' section
at the end of the main mgetty @file{Makefile}. It shouldn't be necessary to
edit @file{voice/Makefile}. You can edit `voice/voclib.h' to configure some
voice options, check the comments there for instructions. The defaults
ought to work unless you have an unusual setup.

To build vgetty, do @samp{make vgetty} in your mgetty directory. If you are
courageous you can try @samp{make vgetty-install} to set up the voice
directory and install the binaries.

Put your greeting message(s) in the messages directory and store their file
names in the @file{Index} file, then edit @file{.code} and put your remote
playback code in it.

To install vgetty, put it in an appropiate directory (/etc? /usr/etc?)  and
add the command line to @file{/etc/inittab} as described in the mgetty
documentation. The command line options are the same, you will probably
want to use something like @samp{-n 4} to wait for four rings before
picking up the phone.

@menu
* vint::            Internals
@end menu

@node vint,  , vinstall, vinstall
@subsection Internals
Below is the default directory structure - if you change it, you will
have to modify the vg_* scripts. (VOICE_DIR is set in the Makefile,
the default is /usr/spool/voice.)

@example
VOICE_DIR/messages/*  : greeting messages
VOICE_DIR/incoming/*  : received messages
VOICE_DIR/voice/vg_*  : external programs called by vgetty
VOICE_DIR/.code       : code digits for remote playing of messages
@end example

All the external programs are shell scripts, you can easily change them if
you want more features. I'd like to hear about any interesting uses.

@node vusage, vutils, vinstall, voice
@section Usage

@code{vgetty} is installed just like @code{mgetty} and accepts the same
command line options. You should have a file called @file{Index} in your
greeting message directory that contains the filenames of your greeting
files, one per line. It will pick a random one when it answers the phone.

If you want to use your modem as an answering machine during the day
and for data dialin during the night, you can use `cron' to create a
file called @file{/etc/answer.<device>} which contains a single line,
either `voice/fax/data' or just `fax/data' to accept only these types
of calls. If the file exists but is empty, vgetty won't answer the
phone at all. This is in addition to the @file{/etc/nologin.<device>}
feature of @code{mgetty}.

DTMF tones can be used to control vgetty. The effects are as follows:

@example
playback mode (during the greeting message):
	'*': stop playing, switch to recording mode.
	'#': hang up. (Use this if you answer the phone by hand after
	     the computer has started talking.)
	'0'-'9': switch to DATA mode. (Not very useful, does anyone
	     have a better idea?)
@end example

@example
recording mode:
	"*<digits>#": start the external DTMF program and pass the
	     digits as $1. The '*' is optional, it can be used to
	     remove mistyped digits ("*22*345#" is equivalent to 
	     "*345#").
	'#' without leading digits: hang up the phone.
@end example

The DTMF command is used for remote playback of messages, the default
code is `*12345#' (stored in VOICE_DIR/.code).

If you have a speech synthesizer package (I use rsynth-0.9.linuxA), you
might want to take a look at the @file{speakdate} script, I use it to
append a date stamp to each recorded message. I'm not going to give a
detailed explanation of how it works, since it is going to be very much
dependent on your setup. Feel free to experiment. I have included my
patches to the rsynth code to enable it to output a voice file on stdout.

@node vutils, vbugs, vusage, voice
@section Voice utilities

Type `zplay' without arguments to get the usage summary.  The most
important applications are:

@example
zplay <voice-file>	: play a file on the telco line
zplay -s <voice-file>	: play a file on the external speaker
zplay -r <file>		: record a file (type <control>-C to stop)
@end example

There is a short manpage for the pvf utilities, it is easy to add new
converters if you want more special effects - send them to me if you
want them integrated into the package.

Here are some examples of what you can use the tools for:

Read the adpcm file A, add one second of silence at the start and cut off
the last half second, mix it with the pvf file B, convert the result to
ADPCM-3 and store it in the file C:
@example
       adpcmtopvf <A | pvfcut -1 .5 | pvfmix B | pvftoadpcm3 >C
@end example


Convert a voice message to a format suitable for inclusion in a MIME
message:
@example
       adpcmtopvf <A | pvfspeed 1.2 | pvftobasic >B
@end example

Play a recording on a sound card:
@example
       adpcmtopvf <A | pvftoau >/dev/audio
@end example

Note that the adpcm converter works only for ZyXELs and is also dependent
on the ROM release you have. Please read the comment in the Makefile.

For further information, `Use the Source, Luke'.

@node vbugs,  , vutils, voice
@section Common problems and solutions

If you find any bugs, please tell me about them, I'll try to fix them for
the next release. Don't forget to include the relevant information from the
log file (@file{/tmp/log.mg.<device>}) and what kind of operating system
and modem you are using.

Don't forget to read the appropiate sections of the mgetty documentation.
This section only mentions vgetty specific problems.

@menu
* vpmisc::          Miscellaneous
* vpnoise::         I get noise instead of speech
* vpfax::           Paper faxes get confused
* vpconnect::       Calling modems don't get a connect
@end menu

@node vpmisc, vpnoise, vbugs, vbugs
@subsection Miscellaneous

@itemize @bullet
@item Where can I get a CELP converter?

ZyXEL considers the CELP format to be proprietary, and won't release
information on the data format. In addition, CELP is a lot more complicated
than ADPCM, and a converter, even if the format was known, would probably
be a fairly complex program. Feel free to write one.

@item I can't record a greeting message

Try calling yourself from somewhere else and use the recorded message. This
is a last resort if you can't get the microphone to work (I never did) and
you aren't allowed to connect the phone parallel to the modem (which German
Telekom doesn't permit).

@item DTMF detection doesn't work reliably

DTMF detection only works while recording a message, and it seems that the
modem doesn't react in the first second after starting the recording. Just
wait a bit before starting to type the digits.

@item People hang up without leaving a message

Ask them, don't ask me@dots{}

@end itemize

@node vpnoise, vpfax, vpmisc, vbugs
@subsection I get noise instead of speech

Loud bursts of noise while playing back data files can have various
reasons, here are some things you can check:

@itemize @bullet
@item Is the data rate high enough? You need 38400 bps to use adpcm.
(CELP has a data rate of 12000 bps, ADPCM-2: 24000 bps, ADPCM-3: 36000 bps).

@item Is the flow control set up correctly? Check the definitions in the
Makefile and policy.h.

@item Data loss - do you have a slow machine with a bad serial chip? On a
PC, you ought to use a port with a 16550 UART.

@item Use a soft, lint-free cloth to clean your hard disk. The magnetic
dust interferes with high-fidelity applications.  (Just kidding@dots{})

@end itemize

@node vpfax, vpconnect, vpnoise, vbugs
@subsection Paper faxes get confused

A calling fax sends beeps (T.30 calling tones), which are detected by the
modem. Occasionally a calling fax will give up as soon as it hears a voice
on the line, in this case you might want to add two seconds of silence at
the start of your greeting message to give the modem a chance to detect the
beep and enter fax mode.

@node vpconnect,  , vpfax, vbugs
@subsection Calling modems don't get a connect

Some modems are confused if they hear a human voice instead of the usual
modem beeps when calling, especially cheap 2400 bps models.  This is
unfortunate, but there isn't much I can do about this.  Voice/Data
distinction is inherently difficult, the modem can't tell the difference
between a human caller who hasn't started speaking yet and a modem which
waits for the called modem to initiate the handshake, since both are
silent. The way @code{vgetty} handles this is by playing the greeting
message, and if it doesn't hear anything, switching to DATA mode. If the
calling modem isn't silent like it should be after the greeting message,
this will never happen.

Another problem is easier to fix - the calling modem has to be patient
enough to wait through the greeting message, the beep and about
seven seconds of silence without giving up, this means that the caller
has to set the chat timeout to a high enough value (i.e. ATS7=120).
If you get many data calls, you should obviously keep the greeting
message short and you might also want to decrease the silence length.
If you get very many data calls, you should get a second phone line and use
mgetty instead.

@c ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

@node Problems,  , voice, Top
@chapter Common problems and solutions

This chapter tries to describe some known problems that can occur when
installing or using this package. Don't worry, most of these have been
solved.

@menu
* Modems::          Modems
* Systems::         Operating Systems
* General::         General problems
* ftp::             Where to find the programs mentioned
* Thanks::          Thanks
@end menu


@node Modems, Systems, Problems, Problems
@section Modems

This section describes problems that can occur when using various types
of modems. Unfortunately, the class 2 fax implementations vary quite a
bit between different manufacturers.

@menu
* Common::          Problems common to many modem types
* Zyxel::           ZyXEL
* Rockwell::        Rockwell-based modems, e.g. Supra
* Zoom-vfast::      Zoom VFP/VFX 24K FaxModem (V.FAST 24,000 Modem)
* Best14496EC::     Best 14496 EC Faxmodem
* GVC::             GVC FM-144Vbis+/1 (Rockwell-based)
* Telekom::         German Telekom approved GVC modems
* Dallas::          Dallas Fax 14.4
* Everex::          Everex
* Exar::            Exar 9624 fax modem
* Tornado::         Tornado / Lightspeed modems
* MultiTech::       MultiTech modems
* Class 1::         Class 1 Faxmodems
@end menu

@node Common, Zyxel, Modems, Modems
@subsection Problems common to many modem types

@itemize @bullet
@item
Disable auto-answer in the modem (@code{ATS0=0}), because it will interfere
with the manual answer done by @code{mgetty}. If you @emph{have} to use
auto-answer, set the @code{mgetty} ring-counter (@code{-n <i>}) high enough
that @code{mgetty} will never try to answer the phone manually.

@item
If your modem doesn't understand the default initialization string in
policy.h, you can try a different approach. Many modems allow you to
store user profiles containing the desired configuration. If yours
does, you can simply replace the init string with @code{ATZ} and
make sure that the default profile contains the right settings.

These options ought to work with most modems:

@code{ATS0=0}: do not auto-answer, @code{E1}: echo on, 
@code{&D3}: reset on DTR->low,

The following are ZyXEL specific:

@code{&H3}: set handshake to RTS+CTS,
@code{&N0}: ``multi-auto'' connect, accept all known protocols,
@code{&K4}: enable v42bis/mnp5 compression.


Naturally, you can use any init string you want (but the modem has to
return OK) --- check with your modem manual.

@item
Some modems do not like the @samp{+FDCC=1,5,...} command.

Most likely, these modems support only up to 9600 bps fax mode. Just
change the second digit (@samp{5}) to the maximum rate your modem
supports, that's @samp{3} for 9600 bps and @samp{1} for 4800. You can
find out what values your modem supports with the @code{AT+FDCC=?}
command. In a later version of mgetty+sendfax, this will be detected
automatically.

You have to change two files, @file{mgetty.c} (at the beginning) and
@file{sendfax.c} (in main() ) - just search for @code{+FDCC=}.

@item
Sometimes mgetty cannot initialize the modem, it times out waiting for
the first @samp{OK}.

I assume that the problem is the DTR-induced modem reset before
sending the first @samp{+++ATH} to the modem.
I know that some modems need quite a lot time after a reset, so this
should go away if you add more delays before sending the first string
to the modem:

In @file{mgetty.c} (line 74 or so) change

@example
char *init_chat_seq[] =
           @{ "", "\\d\\d\\d+++\\d\\d\\d\r\\dATQ0H0", "OK",
@end example

to

@example
char *init_chat_seq[] =
           @{ "", "\\d\\d\\d\\d\\d\\d+++\\d\\d\\d\r\\dATQ0H0", "OK",
                   ^^^^^^^^^ additional delays here
@end example


(please report if that cured the problem, and on which OS / Modem you
did this).

@item
Some operating systems send their commands too fast for some modems (Linux
is known to do this). In that case it may be necessary to increase the
delay times for @code{DO_CHAT_SEND_DELAY} and @code{FAX_COMMAND_DELAY} in
@file{policy.h}.

@item
Some Modems toggle DCD betwen pages, mayhaps correlated to the presence of
the ``high speed'' page transmission carrier. @code{sendfax} normally runs
carrier-sensitive, and will then get a lot error messages in the
@code{read} and @code{write} calls, logging them as @code{I/O Error} or
something similar. To work around this, define
@code{FAX_SEND_IGNORE_CARRIER} in @file{policy.h}.

@item
Some other Modems cannot (or not properly) distinguish between calling
faxes and calling modems.

Some of them just refuse to answer both, only recognizing one and failing
on the other (NO CARRIER) --- in that case, there's nothing you can do to
make it receive both (except making the manufacturer fix it). What you can
do is to force it to receive always fax or always data, what you need more:
go into @file{mgetty.c}, find the @code{AT+FAA=1} command (around line 60)
and change it to @code{AT+FAA=0}. This will disable adaptive answering.
Then, go one line up, and change the @code{AT+FCLASS=0} command to reflect
your needs: @code{CLASS=0} means data-only, and @code{CLASS=2} means
fax-only.

Some other modems can distinguish the different call types @emph{most of
the time}, but some 2400 bps modems mysteriously fail. That may be caused
by some -- strange -- modems sending a certain tone when @emph{calling} the
other side, and the receiving end mistaking that for the fax calling tone.
Arne Marschall said about that: ``...Or try calling your modem with your
phone and whistle. If it says ``+fcon'' it is one one those which can't
deal with modems using a calling tone'' - try it.

Another, quite simplistic approach to distinguish Fax is to wait until the
time specified in register @code{S7} (time to carrier) runs out, and then
switch from data to fax carrier. That normally works quite well - if the
other side is still there at that time @dots{}. For example, if the modem
switches to fax after 60 seconds have passed, and the caller has a timeout
of 50 seconds, it will definitely fail. If in doubt, try setting
@code{ATS7=30} (but only if all else fails - and don't ask @emph{me} why it
doesn't work...)

@end itemize

@node Zyxel, Rockwell, Common, Modems
@subsection ZyXEL

First of all, yes, ZyXELs tend to somewhat non-deterministic behaviour -
some modems work with @code{mgetty+sendfax}, others don't, and I do not
always find out what's wrong.

If it works first, and then suddenly stops working, it does quite often
help do to a @strong{full} modem reset, that is, switch it off, press the
DATA/VOICE key, switch it on again and hold the key for about 20 Seconds.
That cured the problems in some cases.

Do not use non-plus ZyXELs (the ``slower'' ones) for faxing with DTE
speeds above 38400 bps, I got a report that it won't work.

@strong{Warning:} If you use an old ZyXEL and try to send some complex
graphics (the ``tiger.ps'' example file in the GhostScript package is
known to produce this), it may lock up. This is because the ZyXEL
firmware had @emph{lots} of bugs concerning hardware flow
control---sometimes the ZyXEL just forgot to raise CTS when it can
accept data again. The symptoms are that the transmission hangs, no
modem LEDs are flashing any more, the logfile won't grow any more and
the receiving machines hangs up after printing a partial page.

This bug has been fixed in ROM release 6.01, so you should consider
upgrading your eproms if you run into this. With ROM release 6.01 and
6.11a, it works correctly (a hundred-odd faxes sent without problems).

Rom releases I've never been able to make @code{sendfax} work reliably are
6.00 and 6.10 (6.10a works), and various 5.0x releases.

The latest ZyXEL roms can normally be found on ftp.sdsc.edu, in
@file{/pub/other/zyxel/r*}.

Some models, seemingly only the @samp{EG+} (german telekom approved),
toggle the DCD line during the pre-page handshake, thus causing
@code{sendfax} to abort (with a ``I/O error'' during read/write
operations). You can work around this by defining
@code{FAX_SEND_IGNORE_CARRIER} in @file{policy.h}.

Oh, one additional note: ZyXELs can do voice recording and playback. Klaus
Weidner wrote a mgetty-derived program, @code{vgetty}, that will implement
an answering machine and a small voice mailbox using a ZyXEL. If you're
interested, you can find the source in the @file{voice} subdirectory.
(Note that there is no @file{vgetty.c}, it is built from @file{mgetty.c}.
If you have questions relating to vgetty only, please ask Klaus and not me
(I do not know anything about voice, I'm the fax and data guru). His e-mail
address is klaus@@snarc.greenie.muc.de.

@node Rockwell, Zoom-vfast, Zyxel, Modems
@subsection Rockwell-based modems, e.g. Supra

As far as I know, sending or receiving are no problem (although you have to
use 19200 baud when in class 2 faxmode - set @code{DEFAULT_PORTSPEED} and
@code{FAX_SEND_BAUD} to @code{B19200} in @file{policy.h}, or define
@code{FAX_RECEIVE_USE_B19200} if you want to accept data calls with more
than 19200 bps). Remember to change the modem initialization strings to the
proper values for your modem, that is, change @code{AT&H3&N0&K4} to
@code{AT&K3}.

Especially for the @samp{SupraFax} modem, I've been told that you have
to define @code{FAX_MODEM_HANDSHAKE} to @code{&K3} and initialize the
modem with @code{AT&S0&D2&K3}. Since the modem does not like being
reset with DTR->low (@code{&D3}), an @code{ATZ} in the first
initizalization string in @file{mgetty.c} to reset the modem into a
known state is a good idea, too.

(Thanks to Christof Junge, chris@@cj.in-berlin.de, for trying out several
weeks until everything worked!)

Fax polling does not work because the Rockwell chipset does not support it.


@node Zoom-vfast, Best14496EC, Rockwell, Modems
@subsection Zoom VFP/VFX 24K FaxModem (V.FAST modem, 24,000 bps)

For the Zoom V.FAST 24,000 modem, you have to change
@code{MODEM_INIT_STRING} to @code{ATS0=0&F&C1&D2W1} (see the manual for the
meaning of the commands). After that, everything should work.


@node Best14496EC, GVC, Zoom-vfast, Modems
@subsection Best 14496 EC fax modem

Works quite well. Use @code{FLOW_HARD} for all flow control settings, use
19200 bps for sending and receiving. Define @code{MODEM_INIT_STRING} to
@code{AT S7=60 &D3 \\\\Q3 %C1}, and @code{FAX_MODEM_HANDSHAKE} to
@code{\\Q3&S0}. Furthermore, change all @code{AT+FDCC=1,5,...} commands in
@file{mgetty.c} and @code{faxrec.c} to @code{AT+FDCC=1,3,...}.

After that it should work. Kudos to Sami Koskinen (tossu@@krk.fi).


@node GVC, Telekom, Best14496EC, Modems
@subsection GVC FM-144Vbis+/1 (Rockwell-based)

Basically, the modem is similar to the SupraFax modem.

Change @code{FAX_SEND_BAUD} and @code{DEFAULT_PORTSPEED} in
@file{policy.h} to @code{B19200}, remove the ZyXEL-specific stuff
(@samp{AT&N0&K4&H3}) from the initialization (@code{MODEM_INIT_STRING})
in @file{policy.h}; #define @code{FAX_MODEM_HANDSHAKE} as @code{"&H3"}
instead of @code{"&K4"}.

Further, if your model toggles DCD betwen fax pages (@code{sendfax} fails
mysteriously between pages), @code{#define FAX_SEND_IGNORE_CARRIER}.

After that, it should work.

Note: If your modem doesn't properly distinguish incoming fax from data
calls (i.e., a 2400 bps caller is repeatedly ``identified'' as fax caller),
upgrade your firmware. I've been told (thanks to John Watson,
watson%carssdf@@rutgers.edu) that a new firmware release, @strong{v1.69}
exists that will fix those problems.

@node Telekom, Dallas, GVC, Modems
@subsection German Telekom approved GVC modems

(GM-144VBIS+  RC9696/14 (?))

This modem does @emph{not(!)} use Xon/Xoff flow control. Further, the default
modem profile sets @samp{&S1}, which makes the modem disable DSR all the
time. On systems using the FAS serial driver, this will @emph{disable
CTS flow control}!

So, #define @code{FAX_MODEM_HANDSHAKE "\\Q3&S0"} in @file{policy.h}, do not
define @code{FLOW_SOFT} for flow control, and fax sending should work. (It
does for me!)  Changing @code{FAX_SEND_BAUD} to @code{B19200} is not
necessary, it works with @code{B38400}.

Fax receiving... I did not fully test it. It's somewhat difficult since
that modem insists on using auto-answer, but it should be possible to let
it auto-answer if you set mgetty's ring counter high enough.

@node Dallas, Everex, Telekom, Modems
@subsection Dallas Fax 14.4

Change @code{FAX_SEND_BAUD} and @code{DEFAULT_PORTSPEED} to
@code{B19200}, change all occurances of @samp{AT&H3} to @samp{AT&K5}, remove
@samp{AT&N0} and @samp{&K4} in @file{policy.h}.

@node Everex, Exar, Dallas, Modems
@subsection Everex

All I programmed is strictly to everex specs, thus, it should work.
Most likely, some fiddling with the initialization strings is necessary.
(If you have an Everex modem, please report to me what you did change).

@node Exar, Tornado, Everex, Modems
@subsection Exar 9624 fax modem

This modem needs two stop bits (when sending), so you have to add
@code{CSTOPB} to @code{tio.c_cflag = @dots{}} in @file{tio.c}
/ @code{tio_mode_sane()}.

Also, use @code{#define FAX_SEND_BAUD B19200} and, for fax reception,
@code{#define DEFAULT_PORTSPEED B19200}.

Further, the modem is a little bit timing critical - please insert
@code{delay(500)} calls at the end of @code{fax_open_device()}
(@file{sendfax.c}, line 122) and before sending the page punctuation
(@code{fax_command("+FET=...")} in @file{sendfax.c}, @code{main()}, around
line 540).

Also, for at least one Exar 9624 (built into a Compaq notebook), it's been
necessary to add two delays (@code{\\d\\d}) before the @code{AT+FCLASS=0}
initialization string in @file{mgetty.c}.

@node Tornado, MultiTech, Exar, Modems
@subsection Tornado / Lightspeed modems

Here is a suggested setting for the default profile for these modems.
@xref{Common}

For Lightspeed store profile:
@example
at&f
at&c1
at&d3
ats0=0
at%c2
atw1
at&w
@end example

and for tornado store profile:

@example
at&f
at&d3
ats0=0
at&w
@end example

Then just initialize the modem with @code{MODEM_INIT_STRING} set to
@code{ATZ}.

@node MultiTech, Class 1, Tornado, Modems
@subsection MultiTech modems

The following changes were suggested by Glenn Thobe:

@itemize @bullet 
@item
In the file @file{mgetty.c}, around line 84, change @code{+FBOR=0}
to @code{+FBOR=1} (this reverses the fax bit order) and replace
@code{AT+FDCC=1,5,0,@dots{}} with @code{AT+FDCC=1,3,0,@dots{}}.

@item
In @file{policy.h}, use the following defines:
@example
#define MODEM_INIT_STRING	"ATS0=0Q0&D3&E1&E4&E13&E15"
#define FAX_MODEM_HANDSHAKE "&E4"
@end example
@end itemize

@node Class 1,  , MultiTech, Modems
@subsection Class 1 Faxmodems

These do not work. They are not going to be supported (class 1 faxing is
a mess, and the timing is extremely critical---nearly impossible in a
unix environment---read the comments to the FlexFax package for
details).

@node Systems, General, Modems, Problems
@section Operating Systems

This section describes problems that have occured while porting the
package to various operating systems.

@menu
* SCO-322::         SCO Unix 3.2.2 (ODT 1.0 / 1.1)
* SCO-324::         SCO Unix 3.2v4 (ODT 2.0 / 3.0) 
* Linux::           Linux
* ISC::             ISC
* SVR4::            SVR4 Unix
* BSD::             BSD-like flavours of Unix
* AIX::             IBM's AIX Operating System
* SunOS::           SunOS 4.1.1 and up
* 3b1::             AT&T 3b1
@end menu

If your system is not in the list, that doesn't mean it won't work. It
just means that I didn't get a report (or a port) for that system yet.

mgetty+sendfax should work on most unixoid operating systems, as long as
they provide @code{SysV termio} or @code{POSIX termios} call for tty
management. @code{BSD sgtty} support isn't finished yet.

For best results, your system should have @code{select(S)} or
@code{poll(S)}, but if both functions are not available or don't work on
ttys (@code{poll(S)} is known to do this on SVR3.1 and earlier), you can
use a kludge, @code{-DUSE_READ}.

Besides that, you'll need some fiddling with the header files to get all
defines and prototypes right.

Further, you'll have to check @file{tio.c}, function
@code{tio_set_flow_control()}, whether the way hardware flow control is
activated works on your system. Most likely, it won't --- that's on of the
major portability problems. If you change something and get it to work,
please send me patches. (You're welcome to do so anyway).

@node SCO-322, SCO-324, Systems, Systems
@subsection SCO Unix 3.2.2 (ODT 1.0 / 1.1)

No major twiddling needs to be done. If your @code{select()} refuses to
sleep less than one second, use poll(S) instead (set @code{-DUSE_POLL} in
the CFLAGS section of @file{Makefile}).

Use the modem-control devices for mgetty and dial-outs (e.g.
@file{/dev/tty2A}), or (far better), use FAS with minor number of 80+port,
using full RTS + CTS handshake, and non-blocking opens (@file{/dev/ttyF01})
- the original SCO serial driver is slow, unreliable and doesn't do proper
hardware flow control. @xref{SCO-324}

Ignore all the warnings about ``passing arg 2 of signal from
incompatible pointer type''. They are caused because the SCO 3.2.2
development system header files are somewhat unusual.

@node SCO-324, Linux, SCO-322, Systems
@subsection SCO Unix 3.2.4 (ODT 2.0 and ODT 3.0)

I'm using mgetty on SCO 3.2v4(.2) (in fact, developing it there), so be
assured: it works.

I consider the way that hardware flow control is handled on SCO to be
broken, so I @emph{strongly} recommend using the @code{FAS} serial driver
(version 2.11 or higher, earlier versions may crash the system), to be
found on your nearest comp.sources.unix
archive. With @code{fas}, use the devices with a minor number of
@samp{81+port number} for best results. Make sure that your modem enables
the @samp{DSR} line, because otherwise, @code{FAS} won't do hardware
handshake.

If you don't use @code{fas}, I've been told that you have to use the
@samp{modem control} lines, that is, the ``uppercase'' lines, e.g.
@file{/dev/tty1A}, because SCO's serial driver won't do any hardware flow
control at all on the ``lowercase'' lines. Be warned, the driver will also
disable hardware flow control if you use Xon/Xoff flow control (no way to
use both). Since I do not have a SCO system without @code{fas}, I'd like to
hear very much about results on one.

Also, you've to define @code{LOCKS_LOWERCASE}, since that's the convention
on SCO Unix and most other programs expect it.

If mgetty works only partially, but hangs the moment @file{/etc/issue}
is printed, before the `system!login:' prompt is output, you may have to
change the following line of @file{mgetty.c} (around line 540):

@example
        /* honor carrier now: terminate if modem hangs up prematurely
	 */
	tio_carrier( &tio, TRUE );
@end example

to:
@example
        tio_carrier( &tio, FALSE );
@end example

But before you do this, make sure that your modem enables the CD line
while a carrier is present (Hayes modems: @samp{AT&C1}) and also enables
the DSR line (otherwise the port will block once @code{CLOCAL} is
removed).

This could be a problem specific to Uwe's dumb AST-compatible fourport
card, but I do not think so.


Compilation issues:

Ignore warnings about @samp{struct utimbuf} and @samp{struct timeb}, they
are caused by improper include files. On SCO 3.2v4.2, ignore the warnings
about the getopt() prototype, or change prototype or include files.

@node Linux, ISC, SCO-324, Systems
@subsection Linux

From this version on, Hardware Handshake (RTS+CTS) on Linux should work
(but only if mgetty is compiled with POSIX_TERMIOS, but that should be
default on Linux anyway). Nevertheless, the @code{scrts.c} program in
@file{contrib/} is still provided, it has some other uses, too.

Linux versions prior to 99pl14 have a bug in the serial handshake code,
that is, if the @code{CRTSCTS} flag is set, software (Xon/Xoff) flow
control won't work. Teodore Ts'o promised me to fix it in newer kernels, I
think the fix went into 99pl14n or so.

If you have very old (4.1) or otherwise broken (4.4.2) shared libraries,
the alarm() call does not work reliably. This results in a fax receive
aborting with a message like ``alarm clock'' or something similar
(sometimes in the same second that the fax reception started). Upgrade
your libraries to 4.4.1 or 4.4.4.

Linux has no poll(S), so, don't #define @code{USE_POLL}, and the default,
@code{USE_SELECT}, will be used.

@strong{Important note:} Use the @file{/dev/ttyS*} devices for getty and
for dial-out (that is, for kermit, uucico, cu, seyon, ...) - @strong{never}
use @file{/dev/cua*}. Dialing out on @file{/dev/cua*} will result in the
error message ``device busy''. (There are reasons why @code{mgetty} cannot
use the ``@file{ttyS*} vs. @file{cua*} kernel locking mechanism'', see
below), and dialing in (ugh) on @file{/dev/cua*} will result in dozens of
strange things happening because the process won't get a controlling tty.

Some guys seemingly can't resist posting misinformation to the net all the
time, don't believe 'em. The @file{/dev/cua*} devices are @strong{not}
different from the @file{/dev/ttyS*} devices concerning data flow or modem
control lines. The only difference is how the device reacts if you do an
@code{open()}: Opening @file{/dev/ttyS*} normally blocks until the ``carier
detect'' line goes active (unless @code{open()} is called with the
@code{O_NDELAY} flag; @code{mgetty} and all dial-out programs do that), and
opening @file{/dev/cua*} will return an error message (@code{errno=EBUSY})
if another process has the device already open, thus @emph{preventing
dial-out on @file{/dev/cua*}} if @code{mgetty} is active on
@file{/dev/ttyS*}.

We use @file{/dev/ttyS*} all the time for dial-in @emph{and} for dial-out,
and believe me, it works, and it's the @emph{only} combination that will
work properly. The kernel locking mechanism only works if you use modem
auto-answer (the getty process sleeps until the modem gets a carrier), and
mgetty uses manual answer (it waits for the RING message from the modem),
which will save your callers a lot of grief because their calls will
only be answered if your computer is ready to receive a call. Part of the
motivation for writing mgetty was being tired of losing lots of money
for useless calls to a hung machine.

There are various different @code{init} and @code{last} programs out
there, some work with mgetty, some don't. If you get some strange output
from @code{who} and are using a different @code{init} program than the
@code{sysv init}, try to define @code{-DNO_SYSVINIT}. That should help.

I've been told that it's necessary to do that if you use the
@code{simple-init}.

@node ISC, SVR4, Linux, Systems
@subsection ISC

First of all, define @code{-DISC} in the Makefile. This will take care
of some minor problems.

I'm not sure whether the ISC port is really complete, but most of the system
dependencies are ok (the missing @code{sys_nerr} and @code{sys_errlist[]}
definitions), just some twiddling with the header files may still be
necessary, mostly to make select(S) work. Further, you have to link
libinet.a (@samp{-linet}).  If select won't work at all, you can just use
poll(S) instead of select(S) (#define @code{USE_POLL} in @file{mgetty.h})

Again, for best results I recommend using the FAS serial driver, and
using a port with a minor number of 80+portno (ttyF01 etc.)

(Anybody wanting to send me a full port to ISC?)

@node SVR4, BSD, ISC, Systems
@subsection SVR4 Unix

mgetty has been ported to SVR4 now (many thanks to Bodo Bauer,
<bodo@@hal.nbg.sub.org>).

As far as I know, it's sufficient to add @samp{-DSVR4} to the CFLAGS in
Makefile. If you have any problems or suggestions, please report them
also to Bodo, since I do not have a SVR4-System to run tests on.

If you use the @code{SAS} serial driver (streams-version of @code{FAS}) and
want to force @code{sas} to use hardware-handshake all the time, use a
device with a minor device number of @code{80+port number} (see the
@code{sas} manual for explantations). If you use a port with a minor device
number of @code{7*16+i}, @code{mgetty} is able to switch hardware handshake
on and off according to the flags set in policy.h, using
@file{sys/termiox.h}. (Well, it works - but apparently fax reception
doesn't work with this minor device number. Symptom: only one byte is
received during fax reception (0x00). Anybody any clue?)

If you use @code{FAS}, use the devices with a minor device number of
@code{80+port number} (as usual).

@node BSD, AIX, SVR4, Systems
@subsection BSD-like flavours of Unix

A port to NetBSD 386 has been done by Martin Husemann,
martin@@bi-link.owl.de, but it doesn't work yet, because the @code{VTIME}
mechanism for @code{read()} with timeout doesn't work, and because
@code{alarm()} calls don't interrupt @code{read()} calls. But there's some
work going on.

For older versions of BSD Unix that do not have @file{termios.h}, you'll
have to complete the unfinished support for @file{sgtty.h} in @file{tio.c}
and @file{tio.h}.

Generally, BSD Unices do not have a @file{/etc/inittab} as system V has.
Instead, they have @file{/etc/ttytab}. Thus, you have to enter a line like
@example
cua0    "/usr/local/bin/mgetty -x 3 cua0"       vt100
@end example
there. Don't forget to remove (or comment out) the original getty on the
corresponding @file{/dev/tty*} line.

@node AIX, SunOS, BSD, Systems
@subsection IBM's AIX Operating System

Chris Lewis has done an preliminary AIX port. Nobody knows yet whether it
works - nobody had time to run full tests. If you try to run @code{mgetty}
on an AIX machine, please contact me and tell me about your results.
I've got two mails until now, on one machine, it works, on another one, it
doesn't. What do I say now?

On AIX it's not allowed to manipulate @file{/etc/inittab} directly,
instead, you've got to use some system administration tools. To ease
@code{mgetty} installation on AIX, Michael Staats has provided a small
shell script, @code{inittab.aix}, that will help you setup your
@file{inittab} after you've run @code{make install}. Just call it with the
name of the tty you're modem is connected to, e.g. @code{./inittab.aix
tty0}.

@node SunOS, 3b1, AIX, Systems
@subsection SunOS 4.1.1 and up

mgetty has been ported to SunOS, and the two reports that I got yet
indicated success (though I wouldn't call that ``extensively tested'').
If you use SunOS, please send me a brief report about your results.

Thanks to Earl Hartwig, earl@@fozzi.ocunix.on.ca, for the initial port.

In @file{policy.h}, you've to change the location of the LOCK files.

Warning: in all the shell scripts, set @code{echo='...'} to
@code{/usr/5bin/echo}, because the standard one doesn't
support escape codes like @samp{\n} or @samp{\c}.

Flow control for fax reception (@code{FAXREC_FLOW} has to be Xon/Xoff
(@code{FLOW_SOFT}), otherwise, the connection will hang after the +FCON is
received. Dunno why.

Please read also the generic BSD section.

@node 3b1,  , SunOS, Systems
@subsection AT&T 3b1

Glenn Thobe and Chris Lewis have ported mgetty+sendfax to AT&T's 3B1
machines, it should compile without changes to the source (but define
-D_3B1_ in the Makefile).

These ports are to two different environments:

Glenn's port was with GCC (ANSI C) and an add-on select() library routines. 
Chris's port was with stock 3b1 C, without select().
Both seem reliable.

Some further hints concerning a select() library and the pbmplus tools can
be found in the file @file{contrib/3b1} which are the notes from Glenn's
port.

Chris's port relies simply on the suggested definitions (especially
@code{-DUSE_READ}) in the Makefile.  Chris suggests that you use select()
if you already have it for some other reason, but that it seems to work
just fine without it.

@node General, ftp, Systems, Problems
@section General problems

@menu
* pbmtog3::         pbmtog3
* Locks::           Lock files
* ecu::             ecu (extended cu) 3.20 collides with mgetty
@end menu

@node pbmtog3, Locks, General, General
@subsection pbmtog3
The @code{pbmtog3} program from the @file{pbmplus} distribution produces G3
data that does not adhere to the T.4 standard. The initial EOL code is
missing, and the lines are not always 1728 pixels wide.  So, some fax
machines won't accept the output at all (not printing even one line), and
others will complain.

A fix for this problem is available: I have included a patch for pbmtog3,
called @file{patches/pbmtog3.p1}, that will fix the problems. (Oh, by the
way, if you try to send a fax generated with an unpatched pbmtog3, sendfax
will complain that it doesn't like the file @dots{} I've added a small
sanity check to spare me the time browsing through the logfiles guessing
@emph{why} sendfax failed).

@node Locks, ecu, pbmtog3, General
@subsection Lock files
Kermit et.al. cannot dial out while mgetty is running (modem responses
are eaten by mgetty)---what's wrong?

Most propably, you have not configured the @code{LOCK} and
@code{LOCK_BINARY} defines in @file{policy.h} properly. Make sure that
the lockfiles kermit (or cu, pcomm, seyon,@dots{}) expect are in the
path specified in @code{LOCK} and set @code{LOCK_BINARY} to 1 if they do
not write the PID of the locking process in ascii (10 bytes) to the lock
file but as a 4-byte integer instead. Mgetty and Sendfax will understand
both types of lock files, but if @code{LOCK_BINARY} is not set properly,
other programs may not understand the lock file.

Also, make sure that both processes use the same name for the device.
(i.e., mgetty locking @file{/dev/ttyS0} and kermit locking
@file{/dev/modem} will definitely fail.)

@node ecu,  , Locks, General
@subsection ECU 3.20 or earlier on SCO collides with mgetty

ECU releases 3.20 and earlier had a severe bug in the utmp handling that
prevented dialing out on a port that mgetty uses. It has been fixed in ECU
3.27. If you run into that problem, please get a newer release.
Alternatively, you can use the patch that Uwe Fuerst provided, it can be
found in @file{patches/ecu320.p1}.

@node ftp, Thanks, General, Problems
@section How to get the mentioned software by ftp

Most of the software mentioned in this document should be available on most
major ftp sites. Nevertheless, I've got so many questions about the
software that I'll list some ftp sites here.

Furthermore, I'll list some other software that may be interesting if you
plan to use @code{mgetty+sendfax} in different environments than I do.

@itemize @bullet
@item
@code{mgetty+sendfax}

The current release can usually be found at:

sunsite.unc.edu:@file{/pub/Linux/system/Serial/mgetty+sendfax*}

tsx-11.mit.edu:@file{/pub/linux/sources/sbin/mgetty+sendfax*}

ftp.informatik.tu-muenchen.de:@file{/pub/comp/usenet/alt.soures/mgetty+sendfax/}

... and on all sites that mirror SunSITE.unc.edu or tsx-11.

The current beta release is always placed at:

ftp.informatik.tu-muenchen.de:@file{/tmp/mgetty@var{version}-@var{date}.tar.gz}

Use on your own risk!

@item
@code{pbmplus}

I found the pbmplus package (bitmap manipulation tools) at the following
places (most other sites mirroring X11 should also have them):

src.doc.ic.ak.uk:@file{/computing/graphics/pbmplus10dec91.tar.Z}

wuarchive.wustl.edu:@file{/packages/X11R5/contrib-pub/pbmplus10dec91.tar.Z}

ftp.germany.eu.net:@file{/X11/contrib/pbmplus10dec91.tar.Z}

@item
@code{FAS}

Some sites carrying the @code{fas} serial driver for SCO Unix, ISC, @dots{}:

ftp.fu-berlin.de:@file{/pub/unix/driver/fas/fas-2.11.tar.gz}

ftp.germany.eu.net:@file{/newsarchive/comp.sources.unix/volume27/fas-2.11.0/*}

src.doc.ic.ac.uk:@file{/usenet/comp.sources.unix/volume27/fas-2.11.0/*}

@item
@code{GhostScript}

The GNU GhostScript postscript interpreter can be found at all sites
carrying GNU Software. The ``main'' GNU site is @emph{prep.ai.mit.edu}.

@item
@code{hp2pbm}

GhostScript is huge and slow... if you don't need it for other purposes,
you could use Chris Lewis' hp2pbm package, placed at

ftp.uunet.ca:@file{distrib/chris_lewis/hp2pbm/*}

This package contains all you need to convert ASCII or LJ PCL4 -> PBM, G3,
PS, X windows, Epson 24 pin. Coupled with mgetty's @code{g3topbm}, it's all
you need to send ASCII or HP LJ via FAX, and display/print FAXes on X, PS,
LJ, Epson, or via PBM utilities

It performs better than most of the equivalent PBMPLUS utilities.  Indeed,
if your application can generate both LJ and PS, generating LJ and
converting to G3 via @code{hp2pbm} is *much* faster than generating PS and
converting via GhostScript.

[Incidentally, "g3topbm" plus my "pbm2lj" is much faster than g3tolj.  Am not
entirely sure why yet.  May have something to do with scaling, which g3topbm
and pbm2lj don't do.]

@item
@code{psroff}

ftp.uunet.ca:@file{/distrib/chris_lewis/psroff3.0pl17/*}

[It should be ...psroff/*, but they never answer when I ask them to fix my
symlink]

Contains all you need to generate PS, LJ, or ditroff from ditroff or CAT
troff or groff. Together with hp2pbm, you can generate FAXes.  Contains
quite a number of LJ fonts, font manipulation, and font scaling utilities.

With the last two tools, you can send, receive, and print FAXes using
_just_ mgetty and hp2pbm (and a Laserjet printer ;-), without needing
pbmplus or GhostScript or anything else.

@end itemize

@node Thanks,  , ftp, Problems
@section Thanks
Many thanks to:

@itemize @bullet
@item
Peter Bechtold, peter@@fns.greenie.muc.de, for sending me dozens of faxes
to test mgetty, for calling me back numerous times after failed
attempts to send him a fax with sendfax, @dots{}

Further, for the idea to use the remote fax id as part of the filename on
received faxes.

@item
Klaus Weidner, klaus@@greenie.muc.de, for the original linux port,
for testing dozens of pre-releases and for writing the original texinfo
documentation.

@item
Lawrence 'dreamer' Chen, lawrence@@combdyn.com, for the initial ISC port,
and for testing the package with a SupraFAX-Modem.

@item
Kay Schulz, kschulz@@gold.t-informatik.ba-stuttgart.de, for testing on ISC
--- and telling me that it's possible to ask dozens of questions without
having ever read the README file @dots{}

@item
Georg Edelmann, georg@@alpha.saar.de, for testing on Linux, and finding
some stupid bugs.

@item
Uwe S. Fuerst, uwe@@phiger.com, for testing on SCO 3.2v4 (and helping me a
lot nailing down the problem with dial-in/dial-out)

@item
Bodo Bauer, bodo@@hal.nbg.sub.org, for porting mgetty to SVR4 (though he
did quite confuse me by insisting that the fax receiver does
not work @dots{})

@item
Christoph Adomeit, for bugging me long enough to implement XON / XOFF
flow control in fax sending / receiving, and for lending me one of
his GVC modems long enough to make faxing (well, fax sending) work with it.

@item
Christopher M. Ward, for testing on SCO with another GVC modem.

@item
Ralf Stephan, for finding a problem in sendfax whith some modems that
lower CD too soon.

@item
John C. Peterson, for correcting a similar problem in mgetty / faxrec.

@item
Chel van Gennip, for the @code{pbmscale}, @code{g3toxwd} and
@code{g3tolj} programs.

@item
Glenn Thobe and Chris Lewis, for doing the 3B1 port(s).

@item
Chris Lewis, for doing all the @file{/etc/gettdefs} stuff, CallerID,
space limiting, making the source look really awful (K&R C support),
miscellaneous minor fixes,
and tolerating my sometimes very unfriendly reactions to his suggestions.

@item
Caz Yokoyama, for his suggestions concerning faxspool and the mail-to-fax
gateway

@item
Martin Husemann, for SVR4 testing (damn ESIX) and the NetBSD 386 port

@item
Michael A. Meiszl, mam@@mamunx.werries.de, because he asked me to (*grin*)
- and because he found + changed lots of small, nevertheless annoying
things.

@item
Brent Mosbrook from ZyXEL USA, brentm@@zyxel.com, who has been very helpful
solving some ZyXEL-specific fax questions.

@item
@dots{} and to all others who tested release after release.

@end itemize

@contents
@bye

@c Local Variables:
@c fill-column: 75
@c texinfo-column-for-description: 20
@c End:

